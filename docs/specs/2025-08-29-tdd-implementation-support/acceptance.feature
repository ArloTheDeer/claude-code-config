# language: zh-TW
功能: TDD 實作流程支援功能
  作為 Claude Code 使用者
  我想要在 create-impl-plan 指令中支援 TDD 開發模式
  以便我能夠根據需要選擇傳統或測試驅動的開發流程

  背景:
    假設 claude-code-config 專案已經初始化
    並且 commands/create-impl-plan.md 文件存在

  場景: 使用者未提及 TDD 時保持傳統流程
    假設 使用者執行 /create-impl-plan 指令
    並且 對話中未提及「TDD」關鍵字
    當 系統生成實作計畫時
    那麼 任務格式應該保持傳統結構
    並且 不應包含 TDD 相關步驟
    並且 行為應與修改前完全一致

  場景: 使用者提及 TDD 時啟用 TDD 流程
    假設 使用者執行 /create-impl-plan 指令
    並且 對話中明確提及「TDD」
    當 系統生成實作計畫時
    那麼 每個主要任務應該轉換為 TDD 循環格式
    並且 應包含 8 個標準 TDD 步驟
    並且 應引用 TDD 實作流程指導章節

  場景: TDD 任務結構正確轉換
    假設 原始任務為「實作用戶註冊功能」包含 3 個實作要點
    當 啟用 TDD 模式時
    那麼 任務應轉換為包含以下步驟：
      | 步驟 | 描述 |
      | 1.1 | 撰寫空的類別、函式並拋出未實作錯誤 |
      | 1.2 | 撰寫測試敘述 |
      | 1.3 | 實作測試邏輯 |
      | 1.4 | 執行測試，確保測試失敗 |
      | 1.5 | 原始實作要點 1 |
      | 1.6 | 原始實作要點 2 |
      | 1.7 | 原始實作要點 3 |
      | 1.8 | 執行測試，確保測試成功 |

  場景: 開發者確認機制正確運作
    假設 TDD 模式已啟用
    並且 任務進行到「撰寫測試敘述」步驟
    當 Claude Code 完成測試敘述撰寫
    那麼 系統應明確暫停並要求開發者審核
    並且 應提供測試範圍確認的指導說明
    並且 等待開發者確認後才繼續後續步驟

  場景: TDD 流程指導章節存在且完整
    假設 commands/create-impl-plan.md 已修改完成
    當 查看文件末尾時
    那麼 應存在「TDD 實作流程指導」章節
    並且 章節應包含完整的 8 步驟說明
    並且 應包含任務轉換邏輯範例
    並且 應說明開發者確認機制

  場景: 測試框架標準化實作
    假設 TDD 模式已啟用
    當 系統生成測試相關步驟時
    那麼 應使用 describe/it 語法風格
    並且 未實作錯誤應使用 "throw new Error('Not implemented')" 格式
    並且 測試敘述應符合標準 Jest/Mocha 結構